package 异常;

public class ExceptionTest1 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Integer i1 = null;
		//Integer i1 = 4;
		try //将可能会发生异常的代码用try包起来
		{
			System.out.println("aaa");
			
			throw new RuntimeException("我出错了");
			/*
			int i2 = i1;
			System.out.println("bbb"); //当发现int i2 = i1这行代码发现异常(try代码块中的异常点)的时候，那么try块里面的下面的代码就不会执行了，但是try块外面的代码还是会执行
			
			int[] nums = {3,5,9};
			System.out.println(nums[1]);//超出数组范围
			*/
			
		}
		
		catch(NullPointerException e) //catch抓住异常, NullPointerException为要抓住（catch）的异常的类型, e为这个异常对象
		{
			//当发生被抓住的异常,(比如NullPointerException) 那么就会执行catch中的代码
			System.out.println("i1不能为null");
			System.out.println(e.getMessage());
		}
		catch(ArrayIndexOutOfBoundsException e) //可以catch多个异常
		{
			System.out.println("数组范围超出大小");
		}
		/**
		 * JDK1.7之后支持多异常处理的语法(但是不推荐使用，因为程序要清楚的知道自己要catch什么异常)
		catch(NullPointerException | ArrayIndexOutOfBoundsException e)
		{
			System.out.println("发生错误");
		}
		 */
		/*
		catch(Exception e)//可以catch总的异常,  如果catch(Exception e),  那么所有Exception的子类都会被catch住
		//但是强烈不建议直接catch Exception ，因为程序要清楚的知道自己要catch什么异常
		{
			System.out.println("发生错误");
		}
		*/
		
		System.out.println("ccc");//try块之后的代码无论怎么样都会执行
		//发生异常的输出结果:aaa  i1不能为null  ccc
		//不发送异常的输出结果aaa  bbb  ccc
	}

}



		
