package 多线程编程;

import java.util.LinkedList;
import java.util.List;

public class ProducerConsumerTest8
{

	public static void main(String[] args)
	{
		// TODO Auto-generated method stub
		List<Integer> buffer = new LinkedList<Integer>(); //需要频繁的添加删除元素所以使用LinkedList
		int maxSize = 0;
		Producer producer = new Producer(buffer, maxSize);

		Thread thread = new Thread(new Runnable()
		{
			
			@Override
			public void run()
			{
				synchronized (buffer)
				{
					
				}
				// TODO Auto-generated method stub
				
			}
		});

	}
}

class Producer extends Thread
{
	private List<Integer> buffer;
	private int maxSize;

	public Producer(List<Integer> buffer, int maxSize) //构造函数
	{
		this.buffer = buffer;
		this.maxSize = maxSize;
	}

	int id = 0;
	@Override
	public void run()
	{
		while (true)
		{
			synchronized (buffer)
			{
				if (buffer.size() < 10)
				{
					id++; //表示生产了一个产品
					buffer.add(id);//表示把产品放入空盘子里面
					System.out.println("生产者生产了产品" + id + ",并将通知消费者可以消费了");
					buffer.notify();//通知消费者线程，可以消费了
				}
				else
				{

				}

			}
		}

	}

}

class Consumer extends Thread
{
	private List<Integer> buffer;

	public Consumer(List<Integer> buffer)
	{
		this.buffer = buffer;
	}
	@Override
	public void run()
	{
		while (true)
		{
			synchronized (buffer)
			{
				if(buffer.size() < 10)
				{

				}
			}
		}
	}
}
