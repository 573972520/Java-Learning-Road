package 内省;

import java.beans.BeanInfo;
import java.beans.IntrospectionException;
import java.beans.Introspector;
import java.beans.PropertyDescriptor;
import java.io.BufferedReader;
import java.io.Closeable;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.lang.reflect.InvocationTargetException;

public class IntrospectorTest4
{

	public static void readFormFile(String file) throws IOException, ClassNotFoundException
	{
		FileInputStream fis = null;
		InputStreamReader reader = null;
		BufferedReader buffReader = null;
		try
		{

			fis = new FileInputStream(file);
			reader = new InputStreamReader(fis);
			buffReader = new BufferedReader(reader);
			String className = buffReader.readLine();//
			Class clz = Class.forName(className);
			Object obj = clz.newInstance();

			BeanInfo beanInfo = Introspector.getBeanInfo(clz);
			PropertyDescriptor[] props = beanInfo.getPropertyDescriptors();
			String line;
			while ((line = buffReader.readLine()) != null)
			{
				String[] strs = line.split("=");
				String propName = strs[0];
				String propValue = strs[1];

			}
		}
		catch (IOException e)
		{
			throw new RuntimeException(e);
		} catch (IntrospectionException e)
		{
			throw new RuntimeException(e);
		} catch (IllegalAccessException e)
		{
			throw new RuntimeException(e);
		} catch (IllegalArgumentException e)
		{
			throw new RuntimeException(e);
		} catch (InvocationTargetException e)
		{
			throw new RuntimeException(e);
		} catch (InstantiationException e)
		{
			throw new RuntimeException(e);
		} finally
		{
			closeQueitly(buffReader);
			closeQueitly(reader);
			closeQueitly(fis);
		}
		
		
	}
	


	public static void closeQueitly(Closeable c)
	{
		if (c != null)
		{
			try
			{
				c.close();
			} catch (IOException e)
			{

			}
		}
	}

}
